import fetch from 'node-fetch';

const BATCH_SIZE = 50;              // —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
const SLEEP_BETWEEN_REQUESTS = 200; // ms
const SLEEP_BETWEEN_BATCHES = 1000; // ms

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function fetchItem(item) {
  try {
    const res = await fetch(`https://api.warframe.market/v1/items/${item}/orders`);
    if (res.status === 200) {
      const data = await res.json();
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ sell –∏ ingame
      const sellOrders = data.payload.orders
        .filter(order => order.order_type === "sell" && order.user.status === "ingame")
        .sort((a, b) => a.platinum - b.platinum) // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
        .slice(0, 6); // —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 6
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
      const minimalData = sellOrders.map(order => ({
        price: order.platinum,
        seller: order.user.ingame_name,
        quantity: order.quantity
      }));

      console.log(`‚úÖ ${item} –∑–∞–≥—Ä—É–∂–µ–Ω`);
      return minimalData;
    } else if (res.status === 429) {
      console.log(`‚ö†Ô∏è 429 –¥–ª—è ${item}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ –ø–∞—É–∑—É`);
      await sleep(1000);
      return fetchItem(item);
    } else {
      console.log(`–û—à–∏–±–∫–∞ –¥–ª—è ${item}: ${res.status}`);
      return [];
    }
  } catch (e) {
    console.log(`–û—à–∏–±–∫–∞ –¥–ª—è ${item}: ${e}`);
    return [];
  }
}

// items –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, —É–∂–µ –±–µ–∑ –¥—É–±–ª–µ–π
export async function updateCache(items) {
  const uniqueItems = Array.from(new Set(items));
  console.log("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫—ç—à —Ü–µ–Ω –¥–ª—è", uniqueItems.length, "—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.");

  const newCache = {};
  for (let i = 0; i < uniqueItems.length; i += BATCH_SIZE) {
    const batch = uniqueItems.slice(i, i + BATCH_SIZE);
    for (const item of batch) {
      const minimalData = await fetchItem(item);
      newCache[item] = minimalData; // –≤—Å–µ–≥–¥–∞ –º–∞—Å—Å–∏–≤ (–¥–∞–∂–µ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞)
      await sleep(SLEEP_BETWEEN_REQUESTS);
    }
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω –±–∞—Ç—á ${i}‚Äì${i + batch.length}`);
    await sleep(SLEEP_BETWEEN_BATCHES);
  }

  return newCache; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫—ç—à
}
